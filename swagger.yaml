openapi: 3.0.0
info:
  title: Task Master Pro API
  version: 1.0.0
  description: |
    API for managing tasks and users
    
    **üîê Authentication Required for Protected Routes**
    
    To test protected endpoints (POST, PUT, DELETE):
    1. First authenticate by visiting: `/auth/google`
    2. Complete the Google OAuth flow
    3. Return to this documentation to test protected endpoints
    
    The authentication cookie will be automatically included in requests.

servers:
  - url: https://taskmaster-pro-y6q8.onrender.com
    description: Render production server
  - url: http://localhost:3000
    description: Local server

paths:
  # GET routes (public) - no security required
  /api/users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: A list of users
    post:
      summary: Create a new user
      tags: [Users]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        '401':
          description: Unauthorized - Authentication required

  /api/users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user
    put:
      summary: Update user by ID
      tags: [Users]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '401':
          description: Unauthorized - Authentication required
    delete:
      summary: Delete user by ID
      tags: [Users]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '401':
          description: Unauthorized - Authentication required

  /api/tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      responses:
        '200':
          description: List of tasks
    post:
      summary: Create new task
      tags: [Tasks]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created
        '401':
          description: Unauthorized - Authentication required

  /api/tasks/{id}:
    get:
      summary: Get task by ID
      tags: [Tasks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single task
    put:
      summary: Update task by ID
      tags: [Tasks]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated
        '401':
          description: Unauthorized - Authentication required
    delete:
      summary: Delete task by ID
      tags: [Tasks]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted
        '401':
          description: Unauthorized - Authentication required

  /api/projects:
    get:
      summary: Get all projects
      tags: [Projects]
      responses:
        '200':
          description: A list of projects
    post:
      summary: Create a new project
      tags: [Projects]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created
        '401':
          description: Unauthorized - Authentication required

  /api/projects/{id}:
    get:
      summary: Get a project by ID
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project found
        '404':
          description: Project not found
    put:
      summary: Update a project
      tags: [Projects]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated
        '401':
          description: Unauthorized - Authentication required
    delete:
      summary: Delete a project
      tags: [Projects]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted
        '401':
          description: Unauthorized - Authentication required

  /api/teams:
    get:
      summary: Get all teams
      tags: [Teams]
      responses:
        '200':
          description: A list of teams
    post:
      summary: Create a new team
      tags: [Teams]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created
        '401':
          description: Unauthorized - Authentication required

  /api/teams/{id}:
    get:
      summary: Get a team by ID
      tags: [Teams]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team found
        '404':
          description: Team not found
    put:
      summary: Update a team
      tags: [Teams]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team updated
        '401':
          description: Unauthorized - Authentication required
    delete:
      summary: Delete a team
      tags: [Teams]
      description: "üîí **Authentication required** - Visit `/auth/google` first"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Team deleted
        '401':
          description: Unauthorized - Authentication required

components:
  schemas:
    User:
      type: object
      required:
        - googleId
        - name
        - email
      properties:
        googleId:
          type: string
          example: "114739203847203984720"
          description: "Google OAuth ID"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        role:
          type: string
          enum: [admin, manager, user]
          example: "user"
          description: "User role (admin, manager, user)"

    Task:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Prepare team meeting"
          description: "Task title"
        description:
          type: string
          example: "Schedule and lead the first team sync"
        status:
          type: string
          enum: [pending, in progress, completed]
          example: "pending"
          description: "Task status"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
          description: "Task priority"
        dueDate:
          type: string
          format: date-time
          example: "2025-08-01T12:00:00Z"
        assignedTo:
          type: string
          example: "66bc3c7e27e6c51cf0f7e761"
          description: "User ID to assign the task to"
        projectId:
          type: string
          example: "66bc3d8a27e6c51cf0f7e762"
          description: "Optional project ID"

    Project:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Marketing Website Revamp"
        description:
          type: string
          example: "Revamping the entire marketing website for Q3 goals."
        tasks:
          type: array
          items:
            type: string
          example: ["66bc3f3e27e6c51cf0f7e765", "66bc3f4a27e6c51cf0f7e766"]
        members:
          type: array
          items:
            type: string
          example: ["66bc3c7e27e6c51cf0f7e761", "66bc3e9e27e6c51cf0f7e764"]

    Team:
      type: object
      required:
        - name
        - members
      properties:
        name:
          type: string
          example: "Engineering Team"
        description:
          type: string
          example: "Core backend and frontend engineers working on TaskMaster Pro"
        members:
          type: array
          items:
            type: string
          example: ["66bc3c7e27e6c51cf0f7e761", "66bc3c8a27e6c51cf0f7e762"]
          description: "Array of User IDs who are team members"
        projects:
          type: array
          items:
            type: string
          example: ["66bc3d8a27e6c51cf0f7e762", "66bc3d8a27e6c51cf0f7e763"]
          description: "Array of Project IDs assigned to this team"
        leader:
          type: string
          example: "66bc3c7e27e6c51cf0f7e761"
          description: "User ID of the team leader"
        createdBy:
          type: string
          example: "66bc3c7e27e6c51cf0f7e761"
          description: "User ID of who created the team"